program: FUNC ID LPAREN ID COLON BOOL COMMA WHILE
##
## Ends in an error in state: 38.
##
## funcparam_comma -> funcparam COMMA . funcparam_comma [ RPAREN ]
##
## The known suffix of the stack is as follows:
## funcparam COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN ID COLON BOOL WHILE
##
## Ends in an error in state: 37.
##
## funcparam_comma -> funcparam . [ RPAREN ]
## funcparam_comma -> funcparam . COMMA funcparam_comma [ RPAREN ]
##
## The known suffix of the stack is as follows:
## funcparam
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN ID COLON WHILE
##
## Ends in an error in state: 34.
##
## funcparam -> ID COLON . type_ [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## ID COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN ID WHILE
##
## Ends in an error in state: 33.
##
## funcparam -> ID . COLON type_ [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE FOR LPAREN ID IN STRLIT ELIPS STRLIT RPAREN WHILE
##
## Ends in an error in state: 184.
##
## control_flow -> FOR LPAREN ID IN expr ELIPS expr RPAREN . block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## FOR LPAREN ID IN expr ELIPS expr RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE FOR LPAREN ID IN STRLIT ELIPS STRLIT SEMI
##
## Ends in an error in state: 183.
##
## control_flow -> FOR LPAREN ID IN expr ELIPS expr . RPAREN block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## FOR LPAREN ID IN expr ELIPS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 69, spurious reduction of production valexpr_ -> value 
## In state 75, spurious reduction of production valexpr -> valexpr_ 
## In state 76, spurious reduction of production expr -> valexpr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE FOR LPAREN ID IN STRLIT ELIPS WHILE
##
## Ends in an error in state: 182.
##
## control_flow -> FOR LPAREN ID IN expr ELIPS . expr RPAREN block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## FOR LPAREN ID IN expr ELIPS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE FOR LPAREN ID IN STRLIT RPAREN WHILE
##
## Ends in an error in state: 180.
##
## control_flow -> FOR LPAREN ID IN expr RPAREN . block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## FOR LPAREN ID IN expr RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE FOR LPAREN ID IN STRLIT SEMI
##
## Ends in an error in state: 179.
##
## control_flow -> FOR LPAREN ID IN expr . RPAREN block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## control_flow -> FOR LPAREN ID IN expr . ELIPS expr RPAREN block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## FOR LPAREN ID IN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 69, spurious reduction of production valexpr_ -> value 
## In state 75, spurious reduction of production valexpr -> valexpr_ 
## In state 76, spurious reduction of production expr -> valexpr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE FOR LPAREN ID IN WHILE
##
## Ends in an error in state: 178.
##
## control_flow -> FOR LPAREN ID IN . expr RPAREN block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## control_flow -> FOR LPAREN ID IN . expr ELIPS expr RPAREN block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## FOR LPAREN ID IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE FOR LPAREN ID WHILE
##
## Ends in an error in state: 177.
##
## control_flow -> FOR LPAREN ID . IN expr RPAREN block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## control_flow -> FOR LPAREN ID . IN expr ELIPS expr RPAREN block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## FOR LPAREN ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE FOR LPAREN WHILE
##
## Ends in an error in state: 176.
##
## control_flow -> FOR LPAREN . ID IN expr RPAREN block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## control_flow -> FOR LPAREN . ID IN expr ELIPS expr RPAREN block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## FOR LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE FOR WHILE
##
## Ends in an error in state: 175.
##
## control_flow -> FOR . LPAREN ID IN expr RPAREN block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## control_flow -> FOR . LPAREN ID IN expr ELIPS expr RPAREN block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## FOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE FUNC LPAREN RPAREN ARROW WHILE
##
## Ends in an error in state: 64.
##
## anonymous_function -> FUNC LPAREN func_params RPAREN return_type ARROW . block [ SEMI RPAREN RBRACKET RBRACE ELIPS COMMA ]
##
## The known suffix of the stack is as follows:
## FUNC LPAREN func_params RPAREN return_type ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE FUNC LPAREN RPAREN STRING AND
##
## Ends in an error in state: 63.
##
## anonymous_function -> FUNC LPAREN func_params RPAREN return_type . ARROW block [ SEMI RPAREN RBRACKET RBRACE ELIPS COMMA ]
##
## The known suffix of the stack is as follows:
## FUNC LPAREN func_params RPAREN return_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE FUNC LPAREN RPAREN WHILE
##
## Ends in an error in state: 62.
##
## anonymous_function -> FUNC LPAREN func_params RPAREN . return_type ARROW block [ SEMI RPAREN RBRACKET RBRACE ELIPS COMMA ]
##
## The known suffix of the stack is as follows:
## FUNC LPAREN func_params RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE FUNC LPAREN WHILE
##
## Ends in an error in state: 60.
##
## anonymous_function -> FUNC LPAREN . func_params RPAREN return_type ARROW block [ SEMI RPAREN RBRACKET RBRACE ELIPS COMMA ]
##
## The known suffix of the stack is as follows:
## FUNC LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE FUNC WHILE
##
## Ends in an error in state: 59.
##
## anonymous_function -> FUNC . LPAREN func_params RPAREN return_type ARROW block [ SEMI RPAREN RBRACKET RBRACE ELIPS COMMA ]
##
## The known suffix of the stack is as follows:
## FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE ID ASSIGN WHILE
##
## Ends in an error in state: 171.
##
## assignment -> ID ASSIGN . expr [ SEMI ]
##
## The known suffix of the stack is as follows:
## ID ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE ID DEFINE BLIT RPAREN
##
## Ends in an error in state: 206.
##
## stmt -> assignment . SEMI [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 69, spurious reduction of production valexpr_ -> value 
## In state 75, spurious reduction of production valexpr -> valexpr_ 
## In state 76, spurious reduction of production expr -> valexpr 
## In state 170, spurious reduction of production assignment -> ID DEFINE expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE ID DEFINE WHILE
##
## Ends in an error in state: 169.
##
## assignment -> ID DEFINE . expr [ SEMI ]
##
## The known suffix of the stack is as follows:
## ID DEFINE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE ID DOT ID ASSIGN WHILE
##
## Ends in an error in state: 166.
##
## assignment -> ID DOT ID ASSIGN . expr [ SEMI ]
##
## The known suffix of the stack is as follows:
## ID DOT ID ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE ID DOT ID LPAREN STRLIT RBRACKET
##
## Ends in an error in state: 107.
##
## valexpr_ -> ID DOT ID LPAREN expr_params . RPAREN [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## ID DOT ID LPAREN expr_params
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 69, spurious reduction of production valexpr_ -> value 
## In state 75, spurious reduction of production valexpr -> valexpr_ 
## In state 76, spurious reduction of production expr -> valexpr 
## In state 110, spurious reduction of production expr_list -> expr 
## In state 109, spurious reduction of production expr_params -> expr_list 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE ID DOT ID LPAREN WHILE
##
## Ends in an error in state: 74.
##
## valexpr_ -> ID DOT ID LPAREN . expr_params RPAREN [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## ID DOT ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE ID DOT ID WHILE
##
## Ends in an error in state: 165.
##
## assignment -> ID DOT ID . ASSIGN expr [ SEMI ]
## valexpr_ -> ID DOT ID . LPAREN expr_params RPAREN [ SEMI PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## value -> ID DOT ID . [ SEMI PLUS OR NEQ MULT MODULUS MINUS LTEQ LT LBRACKET GTEQ GT EQ DIV AND ]
##
## The known suffix of the stack is as follows:
## ID DOT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE ID DOT WHILE
##
## Ends in an error in state: 164.
##
## assignment -> ID DOT . ID ASSIGN expr [ SEMI ]
## valexpr_ -> ID DOT . ID LPAREN expr_params RPAREN [ SEMI PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## value -> ID DOT . ID [ SEMI PLUS OR NEQ MULT MODULUS MINUS LTEQ LT LBRACKET GTEQ GT EQ DIV AND ]
##
## The known suffix of the stack is as follows:
## ID DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE ID LBRACE ID COLON BLIT COMMA WHILE
##
## Ends in an error in state: 126.
##
## field_list -> anon_decl COMMA . field_list [ RBRACE ]
##
## The known suffix of the stack is as follows:
## anon_decl COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE ID LBRACE ID COLON BLIT SEMI
##
## Ends in an error in state: 125.
##
## field_list -> anon_decl . [ RBRACE ]
## field_list -> anon_decl . COMMA field_list [ RBRACE ]
##
## The known suffix of the stack is as follows:
## anon_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 69, spurious reduction of production valexpr_ -> value 
## In state 75, spurious reduction of production valexpr -> valexpr_ 
## In state 76, spurious reduction of production expr -> valexpr 
## In state 121, spurious reduction of production anon_decl -> ID COLON expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE ID LBRACE ID COLON WHILE
##
## Ends in an error in state: 120.
##
## anon_decl -> ID COLON . expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ID COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE ID LBRACE ID WHILE
##
## Ends in an error in state: 119.
##
## anon_decl -> ID . COLON expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE ID LBRACE WHILE
##
## Ends in an error in state: 118.
##
## struct_ -> ID LBRACE . struct_fields RBRACE [ SEMI RPAREN RBRACKET RBRACE ELIPS COMMA ]
##
## The known suffix of the stack is as follows:
## ID LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE ID LPAREN STRLIT RBRACKET
##
## Ends in an error in state: 116.
##
## valexpr_ -> ID LPAREN expr_params . RPAREN [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## ID LPAREN expr_params
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 69, spurious reduction of production valexpr_ -> value 
## In state 75, spurious reduction of production valexpr -> valexpr_ 
## In state 76, spurious reduction of production expr -> valexpr 
## In state 110, spurious reduction of production expr_list -> expr 
## In state 109, spurious reduction of production expr_params -> expr_list 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE ID LPAREN WHILE
##
## Ends in an error in state: 58.
##
## valexpr_ -> ID LPAREN . expr_params RPAREN [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE ID SUBEQ WHILE
##
## Ends in an error in state: 173.
##
## assignment -> ID operator_eq . expr [ SEMI ]
##
## The known suffix of the stack is as follows:
## ID operator_eq
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE ID WHILE
##
## Ends in an error in state: 159.
##
## assignment -> ID . operator_eq expr [ SEMI ]
## assignment -> ID . DEFINE expr [ SEMI ]
## assignment -> ID . ASSIGN expr [ SEMI ]
## assignment -> ID . DOT ID ASSIGN expr [ SEMI ]
## struct_ -> ID . LBRACE struct_fields RBRACE [ SEMI ]
## valexpr_ -> ID . LPAREN expr_params RPAREN [ SEMI PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## valexpr_ -> ID . DOT ID LPAREN expr_params RPAREN [ SEMI PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## value -> ID . [ SEMI PLUS OR NEQ MULT MODULUS MINUS LTEQ LT LBRACKET GTEQ GT EQ DIV AND ]
## value -> ID . DOT ID [ SEMI PLUS OR NEQ MULT MODULUS MINUS LTEQ LT LBRACKET GTEQ GT EQ DIV AND ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE IF LPAREN STRLIT RPAREN LBRACE RBRACE ELSE IF LPAREN STRLIT RPAREN LBRACE RBRACE ELSE WHILE
##
## Ends in an error in state: 155.
##
## ifelse_stmt -> IF LPAREN expr RPAREN block ELSE . block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN block ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE IF LPAREN STRLIT RPAREN LBRACE RBRACE ELSE IF LPAREN STRLIT RPAREN LBRACE RBRACE SUBEQ
##
## Ends in an error in state: 154.
##
## if_stmt -> IF LPAREN expr RPAREN block . [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## ifelse_stmt -> IF LPAREN expr RPAREN block . ELSE block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE IF LPAREN STRLIT RPAREN LBRACE RBRACE ELSE IF LPAREN STRLIT RPAREN WHILE
##
## Ends in an error in state: 153.
##
## if_stmt -> IF LPAREN expr RPAREN . block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## ifelse_stmt -> IF LPAREN expr RPAREN . block ELSE block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE IF LPAREN STRLIT RPAREN LBRACE RBRACE ELSE IF LPAREN STRLIT SEMI
##
## Ends in an error in state: 152.
##
## if_stmt -> IF LPAREN expr . RPAREN block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## ifelse_stmt -> IF LPAREN expr . RPAREN block ELSE block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 69, spurious reduction of production valexpr_ -> value 
## In state 75, spurious reduction of production valexpr -> valexpr_ 
## In state 76, spurious reduction of production expr -> valexpr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE IF LPAREN STRLIT RPAREN LBRACE RBRACE ELSE IF LPAREN WHILE
##
## Ends in an error in state: 151.
##
## if_stmt -> IF LPAREN . expr RPAREN block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## ifelse_stmt -> IF LPAREN . expr RPAREN block ELSE block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## IF LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE IF LPAREN STRLIT RPAREN LBRACE RBRACE ELSE IF WHILE
##
## Ends in an error in state: 150.
##
## if_stmt -> IF . LPAREN expr RPAREN block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## ifelse_stmt -> IF . LPAREN expr RPAREN block ELSE block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE IF LPAREN STRLIT RPAREN LBRACE RBRACE ELSE WHILE
##
## Ends in an error in state: 149.
##
## elseif_stmt -> IF LPAREN expr RPAREN block ELSE . if_stmt [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## elseif_stmt -> IF LPAREN expr RPAREN block ELSE . ifelse_stmt [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## ifelse_stmt -> IF LPAREN expr RPAREN block ELSE . block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN block ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE IF LPAREN STRLIT RPAREN LBRACE RBRACE SUBEQ
##
## Ends in an error in state: 148.
##
## elseif_stmt -> IF LPAREN expr RPAREN block . ELSE if_stmt [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## elseif_stmt -> IF LPAREN expr RPAREN block . ELSE ifelse_stmt [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## if_stmt -> IF LPAREN expr RPAREN block . [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## ifelse_stmt -> IF LPAREN expr RPAREN block . ELSE block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE IF LPAREN STRLIT RPAREN WHILE
##
## Ends in an error in state: 147.
##
## elseif_stmt -> IF LPAREN expr RPAREN . block ELSE if_stmt [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## elseif_stmt -> IF LPAREN expr RPAREN . block ELSE ifelse_stmt [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## if_stmt -> IF LPAREN expr RPAREN . block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## ifelse_stmt -> IF LPAREN expr RPAREN . block ELSE block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE IF LPAREN STRLIT SEMI
##
## Ends in an error in state: 146.
##
## elseif_stmt -> IF LPAREN expr . RPAREN block ELSE if_stmt [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## elseif_stmt -> IF LPAREN expr . RPAREN block ELSE ifelse_stmt [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## if_stmt -> IF LPAREN expr . RPAREN block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## ifelse_stmt -> IF LPAREN expr . RPAREN block ELSE block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## IF LPAREN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 69, spurious reduction of production valexpr_ -> value 
## In state 75, spurious reduction of production valexpr -> valexpr_ 
## In state 76, spurious reduction of production expr -> valexpr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE IF LPAREN WHILE
##
## Ends in an error in state: 145.
##
## elseif_stmt -> IF LPAREN . expr RPAREN block ELSE if_stmt [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## elseif_stmt -> IF LPAREN . expr RPAREN block ELSE ifelse_stmt [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## if_stmt -> IF LPAREN . expr RPAREN block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## ifelse_stmt -> IF LPAREN . expr RPAREN block ELSE block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## IF LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE IF WHILE
##
## Ends in an error in state: 144.
##
## elseif_stmt -> IF . LPAREN expr RPAREN block ELSE if_stmt [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## elseif_stmt -> IF . LPAREN expr RPAREN block ELSE ifelse_stmt [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## if_stmt -> IF . LPAREN expr RPAREN block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## ifelse_stmt -> IF . LPAREN expr RPAREN block ELSE block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE LBRACKET STRLIT COMMA WHILE
##
## Ends in an error in state: 111.
##
## expr_list -> expr COMMA . expr_list [ RPAREN RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE LBRACKET STRLIT RPAREN
##
## Ends in an error in state: 128.
##
## value -> LBRACKET expr_params . RBRACKET [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT LBRACKET GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr_params
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 69, spurious reduction of production valexpr_ -> value 
## In state 75, spurious reduction of production valexpr -> valexpr_ 
## In state 76, spurious reduction of production expr -> valexpr 
## In state 110, spurious reduction of production expr_list -> expr 
## In state 109, spurious reduction of production expr_params -> expr_list 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE LBRACKET STRLIT SEMI
##
## Ends in an error in state: 110.
##
## expr_list -> expr . [ RPAREN RBRACKET ]
## expr_list -> expr . COMMA expr_list [ RPAREN RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 69, spurious reduction of production valexpr_ -> value 
## In state 75, spurious reduction of production valexpr -> valexpr_ 
## In state 76, spurious reduction of production expr -> valexpr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE LBRACKET WHILE
##
## Ends in an error in state: 56.
##
## value -> LBRACKET . expr_params RBRACKET [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT LBRACKET GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE LPAREN LPAREN STRLIT RPAREN WHILE
##
## Ends in an error in state: 132.
##
## boolean_expr -> valexpr . LT valexpr [ RPAREN PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## boolean_expr -> valexpr . GT valexpr [ RPAREN PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## boolean_expr -> valexpr . GTEQ valexpr [ RPAREN PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## boolean_expr -> valexpr . LTEQ valexpr [ RPAREN PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## boolean_expr -> valexpr . AND valexpr [ RPAREN PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## boolean_expr -> valexpr . OR valexpr [ RPAREN PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## boolean_expr -> valexpr . EQ valexpr [ RPAREN PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## boolean_expr -> valexpr . NEQ valexpr [ RPAREN PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## numerical_expr -> valexpr . PLUS valexpr [ RPAREN PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## numerical_expr -> valexpr . MINUS valexpr [ RPAREN PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## numerical_expr -> valexpr . MULT valexpr [ RPAREN PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## numerical_expr -> valexpr . DIV valexpr [ RPAREN PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## numerical_expr -> valexpr . MODULUS valexpr [ RPAREN PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
##
## The known suffix of the stack is as follows:
## valexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE LPAREN STRLIT RPAREN WHILE
##
## Ends in an error in state: 76.
##
## boolean_expr -> valexpr . LT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . LTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . AND valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . OR valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . EQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . NEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## expr -> valexpr . [ SEMI RPAREN RBRACKET RBRACE ELIPS COMMA ]
## numerical_expr -> valexpr . PLUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MINUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MULT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . DIV valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MODULUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE LPAREN STRLIT SEMI
##
## Ends in an error in state: 130.
##
## valexpr -> valexpr_ . [ PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## valexpr -> LPAREN valexpr_ . RPAREN [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## LPAREN valexpr_
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 69, spurious reduction of production valexpr_ -> value 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE LPAREN WHILE
##
## Ends in an error in state: 54.
##
## valexpr -> LPAREN . valexpr_ RPAREN [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE MAKE LPAREN STRING COMMA STRLIT RBRACKET
##
## Ends in an error in state: 133.
##
## valexpr_ -> MAKE LPAREN type_ COMMA expr_params . RPAREN [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## MAKE LPAREN type_ COMMA expr_params
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 69, spurious reduction of production valexpr_ -> value 
## In state 75, spurious reduction of production valexpr -> valexpr_ 
## In state 76, spurious reduction of production expr -> valexpr 
## In state 110, spurious reduction of production expr_list -> expr 
## In state 109, spurious reduction of production expr_params -> expr_list 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE MAKE LPAREN STRING COMMA WHILE
##
## Ends in an error in state: 53.
##
## valexpr_ -> MAKE LPAREN type_ COMMA . expr_params RPAREN [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## MAKE LPAREN type_ COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE MAKE LPAREN STRING WHILE
##
## Ends in an error in state: 52.
##
## valexpr_ -> MAKE LPAREN type_ . COMMA expr_params RPAREN [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## MAKE LPAREN type_
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE MAKE LPAREN WHILE
##
## Ends in an error in state: 51.
##
## valexpr_ -> MAKE LPAREN . type_ COMMA expr_params RPAREN [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## MAKE LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE MAKE WHILE
##
## Ends in an error in state: 50.
##
## valexpr_ -> MAKE . LPAREN type_ COMMA expr_params RPAREN [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## MAKE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE MINUS LPAREN STRLIT RPAREN WHILE
##
## Ends in an error in state: 135.
##
## boolean_expr -> valexpr . LT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . LTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . AND valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . OR valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . EQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . NEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . PLUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MINUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MULT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . DIV valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MODULUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## unary_expression -> MINUS valexpr . [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## MINUS valexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE MINUS WHILE
##
## Ends in an error in state: 49.
##
## unary_expression -> MINUS . valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE NOT ID WHILE
##
## Ends in an error in state: 71.
##
## valexpr_ -> ID . LPAREN expr_params RPAREN [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## valexpr_ -> ID . DOT ID LPAREN expr_params RPAREN [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## value -> ID . [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT LBRACKET GTEQ GT EQ ELIPS DIV COMMA AND ]
## value -> ID . DOT ID [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT LBRACKET GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE NOT LPAREN STRLIT RPAREN WHILE
##
## Ends in an error in state: 136.
##
## boolean_expr -> valexpr . LT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . LTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . AND valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . OR valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . EQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . NEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . PLUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MINUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MULT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . DIV valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MODULUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## unary_expression -> NOT valexpr . [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## NOT valexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE NOT STRLIT RPAREN
##
## Ends in an error in state: 201.
##
## stmt -> expr . SEMI [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 69, spurious reduction of production valexpr_ -> value 
## In state 75, spurious reduction of production valexpr -> valexpr_ 
## In state 136, spurious reduction of production unary_expression -> NOT valexpr 
## In state 81, spurious reduction of production valexpr_ -> unary_expression 
## In state 75, spurious reduction of production valexpr -> valexpr_ 
## In state 76, spurious reduction of production expr -> valexpr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE NOT WHILE
##
## Ends in an error in state: 48.
##
## unary_expression -> NOT . valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## NOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE RBRACE WHILE
##
## Ends in an error in state: 219.
##
## decls -> func_decl . decls [ EOF ]
##
## The known suffix of the stack is as follows:
## func_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE RETURN ID DOT ID WHILE
##
## Ends in an error in state: 73.
##
## valexpr_ -> ID DOT ID . LPAREN expr_params RPAREN [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## value -> ID DOT ID . [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT LBRACKET GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## ID DOT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE RETURN ID DOT WHILE
##
## Ends in an error in state: 72.
##
## valexpr_ -> ID DOT . ID LPAREN expr_params RPAREN [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## value -> ID DOT . ID [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT LBRACKET GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## ID DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE RETURN ID WHILE
##
## Ends in an error in state: 57.
##
## struct_ -> ID . LBRACE struct_fields RBRACE [ SEMI RPAREN RBRACKET RBRACE ELIPS COMMA ]
## valexpr_ -> ID . LPAREN expr_params RPAREN [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## valexpr_ -> ID . DOT ID LPAREN expr_params RPAREN [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## value -> ID . [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT LBRACKET GTEQ GT EQ ELIPS DIV COMMA AND ]
## value -> ID . DOT ID [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT LBRACKET GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE RETURN STRLIT LBRACKET STRLIT SEMI
##
## Ends in an error in state: 114.
##
## boolean_expr -> valexpr . LT valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## boolean_expr -> valexpr . GT valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## boolean_expr -> valexpr . GTEQ valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## boolean_expr -> valexpr . LTEQ valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## boolean_expr -> valexpr . AND valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## boolean_expr -> valexpr . OR valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## boolean_expr -> valexpr . EQ valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## boolean_expr -> valexpr . NEQ valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## numerical_expr -> valexpr . PLUS valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## numerical_expr -> valexpr . MINUS valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## numerical_expr -> valexpr . MULT valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## numerical_expr -> valexpr . DIV valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## numerical_expr -> valexpr . MODULUS valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## value -> value LBRACKET valexpr . RBRACKET [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT LBRACKET GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## value LBRACKET valexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 69, spurious reduction of production valexpr_ -> value 
## In state 75, spurious reduction of production valexpr -> valexpr_ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE RETURN STRLIT LBRACKET WHILE
##
## Ends in an error in state: 70.
##
## value -> value LBRACKET . valexpr RBRACKET [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT LBRACKET GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## value LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE RETURN STRLIT RPAREN
##
## Ends in an error in state: 142.
##
## stmt -> RETURN expr . SEMI [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## RETURN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 69, spurious reduction of production valexpr_ -> value 
## In state 75, spurious reduction of production valexpr -> valexpr_ 
## In state 76, spurious reduction of production expr -> valexpr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE RETURN STRLIT WHILE
##
## Ends in an error in state: 69.
##
## valexpr_ -> value . [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## value -> value . LBRACKET valexpr RBRACKET [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT LBRACKET GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE RETURN WHILE
##
## Ends in an error in state: 140.
##
## stmt -> RETURN . expr SEMI [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
## stmt -> RETURN . SEMI [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## RETURN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT AND LPAREN BLIT RPAREN WHILE
##
## Ends in an error in state: 105.
##
## boolean_expr -> valexpr . LT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . LTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . AND valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr AND valexpr . [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . OR valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . EQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . NEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . PLUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MINUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MULT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . DIV valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MODULUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr AND valexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT AND WHILE
##
## Ends in an error in state: 104.
##
## boolean_expr -> valexpr AND . valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT DIV WHILE
##
## Ends in an error in state: 86.
##
## numerical_expr -> valexpr DIV . valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT EQ LPAREN BLIT RPAREN WHILE
##
## Ends in an error in state: 103.
##
## boolean_expr -> valexpr . LT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . LTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . AND valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . OR valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . EQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr EQ valexpr . [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . NEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . PLUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MINUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MULT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . DIV valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MODULUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr EQ valexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT EQ WHILE
##
## Ends in an error in state: 102.
##
## boolean_expr -> valexpr EQ . valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT GT LPAREN BLIT RPAREN WHILE
##
## Ends in an error in state: 101.
##
## boolean_expr -> valexpr . LT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr GT valexpr . [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . LTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . AND valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . OR valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . EQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . NEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . PLUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MINUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MULT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . DIV valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MODULUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr GT valexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT GT WHILE
##
## Ends in an error in state: 100.
##
## boolean_expr -> valexpr GT . valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT GTEQ LPAREN BLIT RPAREN WHILE
##
## Ends in an error in state: 99.
##
## boolean_expr -> valexpr . LT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr GTEQ valexpr . [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . LTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . AND valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . OR valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . EQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . NEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . PLUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MINUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MULT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . DIV valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MODULUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr GTEQ valexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT GTEQ WHILE
##
## Ends in an error in state: 98.
##
## boolean_expr -> valexpr GTEQ . valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr GTEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT LBRACKET STRLIT RBRACKET ASSIGN WHILE
##
## Ends in an error in state: 193.
##
## assignment -> value LBRACKET valexpr RBRACKET ASSIGN . expr [ SEMI ]
##
## The known suffix of the stack is as follows:
## value LBRACKET valexpr RBRACKET ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT LBRACKET STRLIT RBRACKET WHILE
##
## Ends in an error in state: 192.
##
## assignment -> value LBRACKET valexpr RBRACKET . ASSIGN expr [ SEMI ]
## value -> value LBRACKET valexpr RBRACKET . [ SEMI PLUS OR NEQ MULT MODULUS MINUS LTEQ LT LBRACKET GTEQ GT EQ DIV AND ]
##
## The known suffix of the stack is as follows:
## value LBRACKET valexpr RBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT LBRACKET STRLIT SEMI
##
## Ends in an error in state: 191.
##
## assignment -> value LBRACKET valexpr . RBRACKET ASSIGN expr [ SEMI ]
## boolean_expr -> valexpr . LT valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## boolean_expr -> valexpr . GT valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## boolean_expr -> valexpr . GTEQ valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## boolean_expr -> valexpr . LTEQ valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## boolean_expr -> valexpr . AND valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## boolean_expr -> valexpr . OR valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## boolean_expr -> valexpr . EQ valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## boolean_expr -> valexpr . NEQ valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## numerical_expr -> valexpr . PLUS valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## numerical_expr -> valexpr . MINUS valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## numerical_expr -> valexpr . MULT valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## numerical_expr -> valexpr . DIV valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## numerical_expr -> valexpr . MODULUS valexpr [ RBRACKET PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## value -> value LBRACKET valexpr . RBRACKET [ SEMI PLUS OR NEQ MULT MODULUS MINUS LTEQ LT LBRACKET GTEQ GT EQ DIV AND ]
##
## The known suffix of the stack is as follows:
## value LBRACKET valexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 69, spurious reduction of production valexpr_ -> value 
## In state 75, spurious reduction of production valexpr -> valexpr_ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT LBRACKET WHILE
##
## Ends in an error in state: 190.
##
## assignment -> value LBRACKET . valexpr RBRACKET ASSIGN expr [ SEMI ]
## value -> value LBRACKET . valexpr RBRACKET [ SEMI PLUS OR NEQ MULT MODULUS MINUS LTEQ LT LBRACKET GTEQ GT EQ DIV AND ]
##
## The known suffix of the stack is as follows:
## value LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT LT LPAREN BLIT RPAREN WHILE
##
## Ends in an error in state: 97.
##
## boolean_expr -> valexpr . LT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr LT valexpr . [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . LTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . AND valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . OR valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . EQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . NEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . PLUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MINUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MULT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . DIV valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MODULUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr LT valexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT LT WHILE
##
## Ends in an error in state: 96.
##
## boolean_expr -> valexpr LT . valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT LTEQ LPAREN BLIT RPAREN WHILE
##
## Ends in an error in state: 95.
##
## boolean_expr -> valexpr . LT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . LTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr LTEQ valexpr . [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . AND valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . OR valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . EQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . NEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . PLUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MINUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MULT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . DIV valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MODULUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr LTEQ valexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT LTEQ WHILE
##
## Ends in an error in state: 94.
##
## boolean_expr -> valexpr LTEQ . valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr LTEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT MINUS LPAREN BLIT RPAREN WHILE
##
## Ends in an error in state: 93.
##
## boolean_expr -> valexpr . LT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . LTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . AND valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . OR valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . EQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . NEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . PLUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MINUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr MINUS valexpr . [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MULT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . DIV valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MODULUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr MINUS valexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT MINUS WHILE
##
## Ends in an error in state: 92.
##
## numerical_expr -> valexpr MINUS . valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT MODULUS WHILE
##
## Ends in an error in state: 84.
##
## numerical_expr -> valexpr MODULUS . valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr MODULUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT MULT WHILE
##
## Ends in an error in state: 79.
##
## numerical_expr -> valexpr MULT . valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT NEQ LPAREN BLIT RPAREN WHILE
##
## Ends in an error in state: 91.
##
## boolean_expr -> valexpr . LT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . LTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . AND valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . OR valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . EQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . NEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr NEQ valexpr . [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . PLUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MINUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MULT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . DIV valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MODULUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr NEQ valexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT NEQ WHILE
##
## Ends in an error in state: 90.
##
## boolean_expr -> valexpr NEQ . valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr NEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT OR LPAREN BLIT RPAREN WHILE
##
## Ends in an error in state: 89.
##
## boolean_expr -> valexpr . LT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . LTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . AND valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . OR valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr OR valexpr . [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . EQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . NEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . PLUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MINUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MULT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . DIV valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MODULUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr OR valexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT OR WHILE
##
## Ends in an error in state: 88.
##
## boolean_expr -> valexpr OR . valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr OR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT PLUS LPAREN BLIT RPAREN WHILE
##
## Ends in an error in state: 78.
##
## boolean_expr -> valexpr . LT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . GTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . LTEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . AND valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . OR valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . EQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## boolean_expr -> valexpr . NEQ valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . PLUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr PLUS valexpr . [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MINUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MULT valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . DIV valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
## numerical_expr -> valexpr . MODULUS valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr PLUS valexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT PLUS WHILE
##
## Ends in an error in state: 77.
##
## numerical_expr -> valexpr PLUS . valexpr [ SEMI RPAREN RBRACKET RBRACE PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ ELIPS DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## valexpr PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT SEMI SUBEQ
##
## Ends in an error in state: 197.
##
## stmt_list -> stmt . stmt_list [ RBRACE ]
##
## The known suffix of the stack is as follows:
## stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE STRLIT WHILE
##
## Ends in an error in state: 189.
##
## assignment -> value . LBRACKET valexpr RBRACKET ASSIGN expr [ SEMI ]
## valexpr_ -> value . [ SEMI PLUS OR NEQ MULT MODULUS MINUS LTEQ LT GTEQ GT EQ DIV AND ]
## value -> value . LBRACKET valexpr RBRACKET [ SEMI PLUS OR NEQ MULT MODULUS MINUS LTEQ LT LBRACKET GTEQ GT EQ DIV AND ]
##
## The known suffix of the stack is as follows:
## value
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE SUBEQ
##
## Ends in an error in state: 44.
##
## block -> LBRACE . stmt_list RBRACE [ WHILE VAR STRUCT STRLIT SEMI RPAREN RETURN RBRACKET RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT EOF ELSE ELIPS COMMA CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE VAR ID BOOL ASSIGN WHILE
##
## Ends in an error in state: 187.
##
## assignment -> vardecl ASSIGN . expr [ SEMI ]
##
## The known suffix of the stack is as follows:
## vardecl ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE VAR ID BOOL WHILE
##
## Ends in an error in state: 186.
##
## assignment -> vardecl . [ SEMI ]
## assignment -> vardecl . ASSIGN expr [ SEMI ]
##
## The known suffix of the stack is as follows:
## vardecl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE WHILE LPAREN STRLIT RPAREN WHILE
##
## Ends in an error in state: 138.
##
## control_flow -> WHILE LPAREN expr RPAREN . block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## WHILE LPAREN expr RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE WHILE LPAREN STRLIT SEMI
##
## Ends in an error in state: 137.
##
## control_flow -> WHILE LPAREN expr . RPAREN block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## WHILE LPAREN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 69, spurious reduction of production valexpr_ -> value 
## In state 75, spurious reduction of production valexpr -> valexpr_ 
## In state 76, spurious reduction of production expr -> valexpr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE WHILE LPAREN WHILE
##
## Ends in an error in state: 46.
##
## control_flow -> WHILE LPAREN . expr RPAREN block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## WHILE LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN LBRACE WHILE WHILE
##
## Ends in an error in state: 45.
##
## control_flow -> WHILE . LPAREN expr RPAREN block [ WHILE VAR STRLIT RETURN RBRACE NOT MINUS MAKE LPAREN LITERAL LBRACKET LBRACE IF ID FUNC FOR FLOATLIT CHARLIT BLIT ]
##
## The known suffix of the stack is as follows:
## WHILE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN STRING INT
##
## Ends in an error in state: 43.
##
## func_decl -> FUNC ID LPAREN func_params RPAREN return_type . block [ VAR STRUCT RBRACE FUNC EOF ]
##
## The known suffix of the stack is as follows:
## FUNC ID LPAREN func_params RPAREN return_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN RPAREN WHILE
##
## Ends in an error in state: 41.
##
## func_decl -> FUNC ID LPAREN func_params RPAREN . return_type block [ VAR STRUCT RBRACE FUNC EOF ]
##
## The known suffix of the stack is as follows:
## FUNC ID LPAREN func_params RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID LPAREN WHILE
##
## Ends in an error in state: 32.
##
## func_decl -> FUNC ID LPAREN . func_params RPAREN return_type block [ VAR STRUCT RBRACE FUNC EOF ]
##
## The known suffix of the stack is as follows:
## FUNC ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC ID WHILE
##
## Ends in an error in state: 31.
##
## func_decl -> FUNC ID . LPAREN func_params RPAREN return_type block [ VAR STRUCT RBRACE FUNC EOF ]
##
## The known suffix of the stack is as follows:
## FUNC ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNC WHILE
##
## Ends in an error in state: 30.
##
## func_decl -> FUNC . ID LPAREN func_params RPAREN return_type block [ VAR STRUCT RBRACE FUNC EOF ]
##
## The known suffix of the stack is as follows:
## FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT ID LBRACE FUNC ID LPAREN RPAREN LBRACE RBRACE WHILE
##
## Ends in an error in state: 211.
##
## func_decls -> func_decl . func_decls [ RBRACE ]
##
## The known suffix of the stack is as follows:
## func_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT ID LBRACE RBRACE WHILE
##
## Ends in an error in state: 218.
##
## decls -> struct_decl . decls [ EOF ]
##
## The known suffix of the stack is as follows:
## struct_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT ID LBRACE VAR ID BOOL SEMI WHILE
##
## Ends in an error in state: 214.
##
## vardecls_semi -> vardecl SEMI . vardecls_semi [ RBRACE FUNC ]
##
## The known suffix of the stack is as follows:
## vardecl SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT ID LBRACE VAR ID BOOL WHILE
##
## Ends in an error in state: 213.
##
## vardecls_semi -> vardecl . SEMI vardecls_semi [ RBRACE FUNC ]
##
## The known suffix of the stack is as follows:
## vardecl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT ID LBRACE WHILE
##
## Ends in an error in state: 28.
##
## struct_decl -> STRUCT ID LBRACE . vardecls_semi func_decls RBRACE [ VAR STRUCT FUNC EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT ID LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT ID WHILE
##
## Ends in an error in state: 27.
##
## struct_decl -> STRUCT ID . LBRACE vardecls_semi func_decls RBRACE [ VAR STRUCT FUNC EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT WHILE
##
## Ends in an error in state: 26.
##
## struct_decl -> STRUCT . ID LBRACE vardecls_semi func_decls RBRACE [ VAR STRUCT FUNC EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VAR ID BOOL SEMI WHILE
##
## Ends in an error in state: 217.
##
## decls -> vardecl SEMI . decls [ EOF ]
##
## The known suffix of the stack is as follows:
## vardecl SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VAR ID BOOL WHILE
##
## Ends in an error in state: 216.
##
## decls -> vardecl . SEMI decls [ EOF ]
##
## The known suffix of the stack is as follows:
## vardecl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VAR ID FUNC LPAREN RPAREN WHILE
##
## Ends in an error in state: 15.
##
## function_type -> FUNC LPAREN typelist RPAREN . type_ [ SEMI RPAREN LBRACE GT COMMA ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## FUNC LPAREN typelist RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VAR ID FUNC LPAREN STRING COMMA WHILE
##
## Ends in an error in state: 21.
##
## typelist_ -> type_ COMMA . typelist_ [ RPAREN ]
##
## The known suffix of the stack is as follows:
## type_ COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VAR ID FUNC LPAREN STRING WHILE
##
## Ends in an error in state: 20.
##
## typelist_ -> type_ . [ RPAREN ]
## typelist_ -> type_ . COMMA typelist_ [ RPAREN ]
##
## The known suffix of the stack is as follows:
## type_
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VAR ID FUNC LPAREN WHILE
##
## Ends in an error in state: 9.
##
## function_type -> FUNC LPAREN . typelist RPAREN type_ [ SEMI RPAREN LBRACE GT COMMA ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## FUNC LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VAR ID FUNC WHILE
##
## Ends in an error in state: 8.
##
## function_type -> FUNC . LPAREN typelist RPAREN type_ [ SEMI RPAREN LBRACE GT COMMA ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VAR ID LIST LT STRING WHILE
##
## Ends in an error in state: 23.
##
## aggregate_type -> LIST LT type_ . GT [ SEMI RPAREN LBRACE GT COMMA ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## LIST LT type_
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VAR ID LIST LT WHILE
##
## Ends in an error in state: 5.
##
## aggregate_type -> LIST LT . type_ GT [ SEMI RPAREN LBRACE GT COMMA ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## LIST LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VAR ID LIST WHILE
##
## Ends in an error in state: 4.
##
## aggregate_type -> LIST . LT type_ GT [ SEMI RPAREN LBRACE GT COMMA ASSIGN ARROW ]
##
## The known suffix of the stack is as follows:
## LIST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VAR ID WHILE
##
## Ends in an error in state: 2.
##
## vardecl -> VAR ID . type_ [ SEMI ASSIGN ]
##
## The known suffix of the stack is as follows:
## VAR ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VAR WHILE
##
## Ends in an error in state: 1.
##
## vardecl -> VAR . ID type_ [ SEMI ASSIGN ]
##
## The known suffix of the stack is as follows:
## VAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: WHILE
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

